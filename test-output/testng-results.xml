<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="13" passed="12">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="18599" started-at="2019-03-09T07:47:03Z" finished-at="2019-03-09T07:47:21Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="18599" started-at="2019-03-09T07:47:03Z" finished-at="2019-03-09T07:47:21Z">
      <class name="com.test.restAssured.restAssured.GetData_XML">
        <test-method status="FAIL" signature="checkCountryForFirstCar()[pri:0, instance:com.test.restAssured.restAssured.GetData_XML@457e2f02]" name="checkCountryForFirstCar" duration-ms="605" started-at="2019-03-09T13:17:11Z" finished-at="2019-03-09T13:17:11Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
XML path MRData.CircuitTable.Circuit[0].Location.Locality doesn't match.
Expected:  Melbourne
  Actual: Melbourne
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
XML path MRData.CircuitTable.Circuit[0].Location.Locality doesn't match.
Expected:  Melbourne
  Actual: Melbourne

	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
	at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:483)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:655)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)
	at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:275)
	at io.restassured.specification.ResponseSpecification$content$1.callCurrent(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)
	at io.restassured.specification.ResponseSpecification$content$1.callCurrent(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:258)
	at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:274)
	at com.test.restAssured.restAssured.GetData_XML.checkCountryForFirstCar(GetData_XML.java:21)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:756)
	at org.testng.TestRunner.run(TestRunner.java:610)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:387)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1293)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1218)
	at org.testng.TestNG.runSuites(TestNG.java:1133)
	at org.testng.TestNG.run(TestNG.java:1104)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkCountryForFirstCar -->
      </class> <!-- com.test.restAssured.restAssured.GetData_XML -->
      <class name="com.test.restAssured.restAssured.PostData">
        <test-method status="PASS" signature="testPOST()[pri:0, instance:com.test.restAssured.restAssured.PostData@39aeed2f]" name="testPOST" duration-ms="760" started-at="2019-03-09T13:17:12Z" finished-at="2019-03-09T13:17:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPOST -->
      </class> <!-- com.test.restAssured.restAssured.PostData -->
      <class name="com.test.restAssured.restAssured.GetData1">
        <test-method status="PASS" signature="testResponseCode()[pri:1, instance:com.test.restAssured.restAssured.GetData1@1b604f19]" name="testResponseCode" duration-ms="945" started-at="2019-03-09T13:17:15Z" finished-at="2019-03-09T13:17:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseCode -->
        <test-method status="PASS" signature="testResponseBody()[pri:2, instance:com.test.restAssured.restAssured.GetData1@1b604f19]" name="testResponseBody" duration-ms="827" started-at="2019-03-09T13:17:20Z" finished-at="2019-03-09T13:17:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseBody -->
      </class> <!-- com.test.restAssured.restAssured.GetData1 -->
      <class name="com.test.restAssured.restAssured.GetData2">
        <test-method status="PASS" signature="testResponseCode()[pri:1, instance:com.test.restAssured.restAssured.GetData2@51565ec2]" name="testResponseCode" duration-ms="990" started-at="2019-03-09T13:17:13Z" finished-at="2019-03-09T13:17:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseCode -->
        <test-method status="PASS" signature="testResponseBody()[pri:2, instance:com.test.restAssured.restAssured.GetData2@51565ec2]" name="testResponseBody" duration-ms="1722" started-at="2019-03-09T13:17:17Z" finished-at="2019-03-09T13:17:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseBody -->
      </class> <!-- com.test.restAssured.restAssured.GetData2 -->
      <class name="com.test.restAssured.restAssured.GetCallBDD">
        <test-method status="PASS" signature="test_numberOfCircuitsfor2017()[pri:0, instance:com.test.restAssured.restAssured.GetCallBDD@7823a2f9]" name="test_numberOfCircuitsfor2017" duration-ms="5941" started-at="2019-03-09T13:17:03Z" finished-at="2019-03-09T13:17:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_numberOfCircuitsfor2017 -->
      </class> <!-- com.test.restAssured.restAssured.GetCallBDD -->
      <class name="com.test.restAssured.restAssured.GetData">
        <test-method status="PASS" signature="testResponseCode()[pri:1, instance:com.test.restAssured.restAssured.GetData@4678c730]" name="testResponseCode" duration-ms="884" started-at="2019-03-09T13:17:16Z" finished-at="2019-03-09T13:17:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseCode -->
        <test-method status="PASS" signature="testResponseBody()[pri:2, instance:com.test.restAssured.restAssured.GetData@4678c730]" name="testResponseBody" duration-ms="848" started-at="2019-03-09T13:17:21Z" finished-at="2019-03-09T13:17:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseBody -->
      </class> <!-- com.test.restAssured.restAssured.GetData -->
      <class name="com.test.restAssured.restAssured.GetEUData">
        <test-method status="PASS" signature="testResponseCode()[pri:1, instance:com.test.restAssured.restAssured.GetEUData@724af044]" name="testResponseCode" duration-ms="716" started-at="2019-03-09T13:17:14Z" finished-at="2019-03-09T13:17:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseCode -->
        <test-method status="PASS" signature="testResponseBody()[pri:2, instance:com.test.restAssured.restAssured.GetEUData@724af044]" name="testResponseBody" duration-ms="1366" started-at="2019-03-09T13:17:18Z" finished-at="2019-03-09T13:17:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseBody -->
      </class> <!-- com.test.restAssured.restAssured.GetEUData -->
      <class name="com.test.restAssured.restAssured.GetData_Assertion">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.restAssured.restAssured.GetData_Assertion@5c7fa833]" name="startTest" duration-ms="1219" started-at="2019-03-09T13:17:11Z" finished-at="2019-03-09T13:17:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
      </class> <!-- com.test.restAssured.restAssured.GetData_Assertion -->
      <class name="com.test.restAssured.restAssured.PostData1">
        <test-method status="PASS" signature="testPOST()[pri:0, instance:com.test.restAssured.restAssured.PostData1@4cc0edeb]" name="testPOST" duration-ms="1636" started-at="2019-03-09T13:17:09Z" finished-at="2019-03-09T13:17:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPOST -->
      </class> <!-- com.test.restAssured.restAssured.PostData1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
